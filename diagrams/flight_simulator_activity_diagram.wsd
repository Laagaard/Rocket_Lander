@startuml flight_simulator_diagram

package Initial Conditions{

split
-[hidden]->
:Vehicle Mass; <<output>>

split again
-[hidden]->
:Inertia Tensor; <<output>>

split again
-[hidden]->
:Starting Position/Orientation/Velocity
(Note: Orientation includes **launch angle**); <<output>>

split again
-[hidden]->
split
-[hidden]->
:Thrust Curves; <<output>>

split again
-[hidden]->
:Propellant Mass; <<output>>

split again
-[hidden]->
:Total Impulse; <<output>>

end split

:Motor Characteristics;

split again
-[hidden]->
:Physical Constants
(e.g., gravity); <<output>>

split again
-[hidden]->
:Wind; <<output>>

end split
}

:Vehicle State;
:Launch;
floating note left: __Note__: the "Flight Simulator" includes <i>everything</i> \nrelated to simuating the rocket's flight, \nincluding vehicle dynamics and any control system(s).

partition Flight Simulator {

while (Altitude > 0) is (yes)

:Moment Equations;
:Rotational Rates;
:Euler Angle Rates;
:Euler Angles;
:Compute Transformation Matrix;

fork
:Transform Body Accelerations to
Inertial Frame;

fork
:2x Integrate for Displacement;
:Update Vehicle Position;

fork again
:1x Integrate for Velocity;
:Transform Velocity to Body Frame;
:Compute Aerodynamic Forces;

end fork

fork again
:Transform Body Axes to Inertial Frame;
:Update Vehicle Orientation;

end fork

:Update Vehicle State;

if (Vehicle State == Desired Vehicle State) then (no)

partition Controller{

split
:Adjust TVC angle;

split again
:Adjust control fin angles;

end split
}

else (yes)

endif

endwhile (no)

}

:Display Results;
stop

@enduml