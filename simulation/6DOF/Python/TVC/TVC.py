import numpy as np

class TVC:
    """
    Thrust Vector Control (TVC) system for RocketPy.
    This class handles gimbal angles, applies thrust rotation, and computes torque.
    """
    def __init__(self, max_gimbal=10, servo_rate=375):
        """
        Initialize TVC system.
        
        Parameters:
        max_gimbal : float
            Maximum gimbal angle in degrees.
        gimbal_rate : float
            Maximum gimbal rate in degrees per second.

        The gimbal_rate refers to the servo rotation rate. That does not directly correlate to 
        the gimbal angle of the TVC motor. That must be calculated.
        """
        self.max_gimbal = np.radians(max_gimbal)  # Convert to radians
        self.gimbal_rate = np.radians((1.5/4)*servo_rate)  # Convert to gimbal turn speed (rad/sec)
        self.gimbal_angle_x = 0.0  # Initial pitch gimbal angle
        self.gimbal_angle_y = 0.0  # Initial yaw gimbal angle
    
    def update_gimbal(self, pitch_command, yaw_command, dt):
        """
        Update gimbal angles based on commanded inputs with rate limits.
        The gimbal is limited to a maximum of 10 degrees in any direction.
        The servo rotation rate is also included to accurately simulate how
        the thrust vector would change in real time.
        
        Parameters:
        pitch_command : float
            Desired pitch gimbal angle in radians.
        yaw_command : float
            Desired yaw gimbal angle in radians.
        dt : float
            Time step for rate limiting.
        """
        # Convert commands to numpy array
        command_vector = np.array([pitch_command, yaw_command])
        
        # Compute the magnitude of the commanded gimbal deflection
        command_magnitude = np.linalg.norm(command_vector)
        
        # Enforce circular constraint
        if command_magnitude > self.max_gimbal:
            command_vector = (command_vector / command_magnitude) * self.max_gimbal
        
        # Apply rate limits
        max_step = self.gimbal_rate * dt
        delta_vector = command_vector - np.array([self.gimbal_angle_x, self.gimbal_angle_y])
        
        # Limit the change based on max gimbal rate
        step_magnitude = np.linalg.norm(delta_vector)
        if step_magnitude > max_step:
            delta_vector = (delta_vector / step_magnitude) * max_step
        
        # Update gimbal angles
        self.gimbal_angle_x += delta_vector[0]
        self.gimbal_angle_y += delta_vector[1]
    
    def get_thrust_vector(self, thrust):
        """
        Compute the rotated thrust vector based on gimbal angles.
        
        Parameters:
        thrust : float
            Magnitude of thrust force.
        
        Returns:
        np.array
            3D thrust vector.
        """
        thrust_vector = np.array([0, 0, thrust])  # Default thrust in +Z direction
        
        # Rotation matrix for gimbal angles
        R_pitch = np.array([
            [np.cos(self.gimbal_angle_x), 0, np.sin(self.gimbal_angle_x)],
            [0, 1, 0],
            [-np.sin(self.gimbal_angle_x), 0, np.cos(self.gimbal_angle_x)]
        ])
        
        R_yaw = np.array([
            [1, 0, 0],
            [0, np.cos(self.gimbal_angle_y), -np.sin(self.gimbal_angle_y)],
            [0, np.sin(self.gimbal_angle_y), np.cos(self.gimbal_angle_y)]
        ])
        
        # Apply rotations
        rotated_thrust = R_yaw @ (R_pitch @ thrust_vector)
        return rotated_thrust
    
    def get_torque(self, thrust, nozzle_position):
        """
        Compute torque generated by thrust vectoring.
        
        Parameters:
        thrust : float
            Thrust magnitude.
        nozzle_position : np.array
            3D position of nozzle relative to center of mass.
        
        Returns:
        np.array
            Torque vector.
        """
        thrust_vector = self.get_thrust_vector(thrust)
        return np.cross(nozzle_position, thrust_vector)
    
    def get_gimbal_angles(self):
        """
        Return the current gimbal angles.
        
        Returns
        -------
        tuple
            A tuple containing the gimbal angles in the x and y axes.
        """
        return self.gimbal_angle_x, self.gimbal_angle_y

    def reset(self):
        """
        Reset the gimbal angles to zero.
        """
        self.gimbal_angle_x = 0.0
        self.gimbal_angle_y = 0.0
